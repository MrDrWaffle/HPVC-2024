#define HALL_PIN 2

const int cadenceInterval = 3000; 
const int updateInterval = 1000; 
const int numCadenceReadings = 3; 
unsigned long previousCadenceTime = 0;
unsigned long previousUpdateTime = 0;
int pedalRevolutions = 0;
float cadence = 0.0;
float cadenceReadings[numCadenceReadings] = {0.0}; 
int cadenceIndex = 0; 

void setup() {
  Serial.begin(9600);
  pinMode(HALL_PIN, INPUT);
  attachInterrupt(digitalPinToInterrupt(HALL_PIN), hallSensorISR, RISING);
}

void loop() {
  unsigned long currentTime = millis();
  int sensorState = digitalRead(HALL_PIN);
  
  //measure cadence and put in stack
  if (currentTime - previousCadenceTime >= cadenceInterval) {
    
    cadence = ((float)pedalRevolutions * 60000.0) / ((float)cadenceInterval);
    //Serial.print(cadence);
    
    cadenceReadings[cadenceIndex] = cadence;
    cadenceIndex = (cadenceIndex + 1) % numCadenceReadings;

    // Reset
    pedalRevolutions = 0;
    previousCadenceTime = currentTime;
  }

  //update cadence
  if (currentTime - previousUpdateTime >= updateInterval) {
    
    float avgCadence = 0.0;
    for (int i = 0; i < numCadenceReadings; ++i) {
      avgCadence += cadenceReadings[i];
    }
    avgCadence /= numCadenceReadings;

    Serial.print("Current Cadence: ");
    Serial.print(avgCadence);
    Serial.println(" RPM");
    
    previousUpdateTime = currentTime;
  }
}

void hallSensorISR() {
  pedalRevolutions++;
}
